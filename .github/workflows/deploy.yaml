# yamllint disable rule:comments
---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Create and publish a Docker images
'on': workflow_call

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  prepare-matrix:
    uses: deedee-ops/containers/.github/workflows/prepare-matrix.yaml@master
    secrets: inherit

  deploy:
    needs: prepare-matrix
    name: Build and test
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-matrix.outputs.matrix != '' && needs.prepare-matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        apps: ["${{ fromJson(needs.prepare-matrix.outputs.matrix) }}"]
      fail-fast: false
    # yamllint disable rule:line-length
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          token: "${{ steps.generate-token.outputs.token }}"
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |-
          base_image="$(jq '.base' --raw-output apps/${{ matrix.apps.app }}/metadata.json)"
          test_mute_cmd="$(jq '.testMuteCmd' --raw-output apps/${{ matrix.apps.app }}/metadata.json)"
          build_version="$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | if .version == "master" then "latest" else .version end' ./apps/${{ matrix.apps.app }}/metadata.json)"
          build_metavar="$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | .metavar' ./apps/${{ matrix.apps.app }}/metadata.json)"
          baseimg_build_version="$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | .baseimgversion' ./apps/${{ matrix.apps.app }}/metadata.json)"
          export test_mute_cmd

          {
            echo "build_date=$(date --rfc-3339=seconds --utc)"
            echo "build_version=${build_version}"
            echo "build_metavar=${build_metavar}"
            echo "baseimg_build_version=${baseimg_build_version}"
            echo "base_image=${base_image}"
            echo "platforms=$(jq --arg chan "${{ matrix.apps.channel }}" --raw-output '(.channels | .[] | select(.name == $chan)) | .platforms | join(",")' ./apps/${{ matrix.apps.app }}/metadata.json)"
          } >> "$GITHUB_OUTPUT"
          if [[ "${base_image}" == true ]]; then
            echo "label_type=org.opencontainers.image.base" >> "$GITHUB_OUTPUT"
          else
            echo "label_type=org.opencontainers.image" >> "$GITHUB_OUTPUT"
          fi

          tags="$(echo "${build_version}" | \
          sed -E 's@^([0-9]{4})-([0-9]{2})-([0-9]{2})(.*)$@\1.\2.\3\4@g' | \
          awk -F. '{ print "#" $1 "#" $1 "." $2 "#" $1 "." $2 "." $3 "#" $1 "." $2 "." $3 "." $4 "#" }' | \
          sed -E 's@[^#]+\.+#@@g' | \
          sed 's@#$@@g' | \
          sed 's@#@,${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}---suffix:@g' | \
          awk -F\# '{ print $0 ",${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}---suffix:latest"}')"
          if [[ "${{ matrix.apps.channel }}" == "stable" ]]; then
            tags="${tags//---suffix/}"
            # tags="$(sed 's@---suffix@@g' <<< "${tags}")"
          else
            tags="${tags//---suffix/-${{ matrix.apps.channel }}}"
            # tags="$(sed 's@---suffix@-${{ matrix.apps.channel }}@g' <<< "${tags}")"
          fi

          echo "tags=${tags}" >> "$GITHUB_OUTPUT"

      - name: Setup QEMU
        uses: docker/setup-qemu-action@5964de0df58d5ad28b04d8fe2e6b80ad47105b91 # v3.5.0
        with:
          image: "public.ecr.aws/eks-distro-build-tooling/binfmt-misc:qemu-v7.0.0"

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
        with:
          version: latest
          driver-opts: |
            image=public.ecr.aws/vend/moby/buildkit:buildx-stable-1

      - name: Setup GHCR
        uses: docker/login-action@9780b0c442fbb1117ed29e0efdff1e18412f7567 # v3.3.0
        with:
          registry: ${{ env.IMAGE_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build all platforms
        id: release
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        with:
          build-args: |-
            BASEIMGVERSION=${{ steps.vars.outputs.baseimg_build_version }}
            METAVAR=${{ steps.vars.outputs.build_metavar }}
            VERSION=${{ steps.vars.outputs.build_version }}
            CHANNEL=${{ matrix.apps.channel }}
          labels: |-
            ${{ steps.vars.outputs.label_type }}.created="${{ steps.vars.outputs.build_date }}"
            ${{ steps.vars.outputs.label_type }}.title="${{ matrix.apps.app }} (${{ matrix.apps.channel }})"
            ${{ steps.vars.outputs.label_type }}.version="${{ steps.vars.outputs.build_version }}"
            ${{ steps.vars.outputs.label_type }}.authors="Igor Rzegocki <containers@ajgon.ovh>"
            ${{ steps.vars.outputs.label_type }}.url="https://github.com/deedee-ops/containers/tree/master/apps/${{ matrix.apps.app }}"
            ${{ steps.vars.outputs.label_type }}.build.url="https://github.com/deedee-ops/containers/actions/runs/${{ github.run_id }}"
            ${{ steps.vars.outputs.label_type }}.documentation="https://github.com/deedee-ops/containers/tree/master/apps/${{ matrix.apps.app }}/README.md"
            ${{ steps.vars.outputs.label_type }}.revision="${{ github.sha }}"
          context: apps/${{ matrix.apps.app }}
          platforms: ${{ steps.vars.outputs.platforms }}
          file: apps/${{ matrix.apps.app }}/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          # https://github.com/community/community/discussions/45969#discussioncomment-4852744
          provenance: false
          sbom: false
          # yamllint enable

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build-success:
    name: Build matrix success
    runs-on: ubuntu-latest
    needs:
      - deploy
    if: ${{ always() }}
    steps:
      - name: Check build matrix status
        if: ${{ needs.deploy.result != 'success' && needs.deploy.result != 'skipped' }}
        run: exit 1
# yamllint enable rule:comments
