# yamllint disable rule:comments
---
# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json
name: Run all the tests
'on': workflow_call

env:
  IMAGE_REGISTRY: ghcr.io

jobs:
  prepare-matrix:
    uses: deedee-ops/containers/.github/workflows/prepare-matrix.yaml@master
    secrets: inherit

  test:
    needs: prepare-matrix
    name: Test
    runs-on: ubuntu-latest
    if: ${{ needs.prepare-matrix.outputs.matrix != '' && needs.prepare-matrix.outputs.matrix != '[]' }}
    strategy:
      matrix:
        apps: ["${{ fromJson(needs.prepare-matrix.outputs.matrix) }}"]
      fail-fast: false
    # yamllint disable rule:line-length
    steps:
      - name: Generate Token
        uses: tibdex/github-app-token@3beb63f4bd073e61482598c45c71c1019b59b73a # v2.1.0
        id: generate-token
        with:
          app_id: "${{ secrets.BOT_APP_ID }}"
          private_key: "${{ secrets.BOT_APP_PRIVATE_KEY }}"

      - name: Checkout
        uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
        with:
          token: "${{ steps.generate-token.outputs.token }}"
          fetch-depth: 1

      - name: Setup workflow Variables
        id: vars
        shell: bash
        run: |-
          test_mute_cmd=$(jq '.testMuteCmd' --raw-output apps/${{ matrix.apps.app }}/metadata.json)
          build_version=$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | .version' ./apps/${{ matrix.apps.app }}/metadata.json)
          baseimg_build_version=$(jq --arg chan ${{ matrix.apps.channel }} --raw-output '(.channels | .[] | select(.name == $chan)) | .baseimgversion' ./apps/${{ matrix.apps.app }}/metadata.json)

          echo "build_version=${build_version}" >> $GITHUB_OUTPUT
          echo "baseimg_build_version=${baseimg_build_version}" >> $GITHUB_OUTPUT
          echo "goss_file=./apps/${{ matrix.apps.app }}/ci/goss.yaml" >> $GITHUB_OUTPUT
          if [[ "${test_mute_cmd}" == true ]]; then
            echo "goss_args=tail -f /dev/null" >> $GITHUB_OUTPUT
            echo "goss_entrypoint=--entrypoint ''" >> $GITHUB_OUTPUT
          fi
          if [ -d ./apps/${{ matrix.apps.app }}/ci/secrets ]; then
            echo "goss_run_env=-v $(pwd)/apps/${{ matrix.apps.app }}/ci/secrets:/secrets" >> $GITHUB_OUTPUT
          fi

      - name: Setup Goss
        uses: e1himself/goss-installation-action@fbb6fb55d3e59c96045b2500eeb8ce0995d99ac1 # v1.2.1

      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3.3.0
        with:
          version: latest
          driver-opts: |
            image=public.ecr.aws/vend/moby/buildkit:buildx-stable-1

      - name: Check tests existence
        id: check_ci
        uses: andstor/file-existence-action@076e0072799f4942c8bc574a82233e1e4d13e9d6 # v3.0.0
        with:
          files: apps/${{ matrix.apps.app }}/ci
          fail: false

      - name: Build container image for testing and snyk
        uses: docker/build-push-action@31159d49c0d4756269a0940a750801a1ea5d7003 # v6.1.0
        with:
          build-args: |-
            BASEIMGVERSION=${{ steps.vars.outputs.baseimg_build_version }}
            VERSION=${{ steps.vars.outputs.build_version }}
            CHANNEL=${{ matrix.apps.channel }}
          context: apps/${{ matrix.apps.app }}
          platforms: linux/amd64  # load does not support muti-arch https://github.com/docker/buildx/issues/290
          file: apps/${{ matrix.apps.app }}/Dockerfile
          load: true
          no-cache: true
          tags: |-
            ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Goss tests
        id: dgoss
        shell: bash
        if: steps.check_ci.outputs.files_exists == 'true'
        env:
          CONTAINER_RUNTIME: docker
          GOSS_FILE: ${{ steps.vars.outputs.goss_file }}
          GOSS_OPTS: |-
            --retry-timeout 60s --sleep 2s --color --format documentation
          GOSS_SLEEP: 2
          CONTAINER_LOG_OUTPUT: goss_container_log_output
        run: >-
          dgoss run
          --read-only
          -u 65000:65000
          --cap-drop=all
          ${{ steps.vars.outputs.goss_run_env }}
          ${{ steps.vars.outputs.goss_entrypoint }}
          ${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing
          ${{ steps.vars.outputs.goss_args }}

      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: "${{ env.IMAGE_REGISTRY }}/${{ github.repository_owner }}/${{ matrix.apps.app }}:testing"
          args: --file=apps/${{ matrix.apps.app }}/Dockerfile --exclude-base-image-vulns --severity-threshold=medium --policy-path=.snyk

      - name: Upload result to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: snyk.sarif

  # Summarize matrix https://github.community/t/status-check-for-a-matrix-jobs/127354/7
  build-success:
    name: Build matrix success
    runs-on: ubuntu-latest
    needs:
      - test
    if: ${{ needs.prepare-matrix.outputs.matrix != '' && needs.prepare-matrix.outputs.matrix != '[]' }}
    steps:
      - name: Check build matrix status
        if: ${{ needs.test.result != 'success' }}
        run: exit 1
# yamllint enable rule:comments
